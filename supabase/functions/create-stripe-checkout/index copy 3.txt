// supabase/functions/create-stripe-checkout/index.ts

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import Stripe from "https://esm.sh/stripe@12.12.0?target=deno";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

// Se inicializa Stripe fuera del handler.
// Esto utiliza la clave secreta de la plataforma (tu jefe).
const stripe = new Stripe(Deno.env.get("STRIPE_SECRET_KEY") ?? "", {
  httpClient: Stripe.createFetchHttpClient(),
});

// Porcentaje de comisión para el jefe/plataforma (5% = 0.05)
const PLATFORM_COMMISSION_PERCENTAGE = 0.05;

const getOrCreateStripeCustomer = async (userId: string, email: string) => {
  const adminClient = createClient(
    Deno.env.get("PROJECT_URL") ?? "",
    Deno.env.get("SERVICE_ROLE_KEY") ?? ""
  );

  const { data: profileData } = await adminClient
    .from("profiles")
    .select("stripe_customer_id")
    .eq("id", userId)
    .single();

  if (profileData?.stripe_customer_id) {
    return profileData.stripe_customer_id;
  }

  const customer = await stripe.customers.create({
    email: email,
    metadata: { supabase_user_id: userId },
  });

  await adminClient
    .from("profiles")
    .update({ stripe_customer_id: customer.id })
    .eq("id", userId);

  return customer.id;
};

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const { communityId } = await req.json();
    if (!communityId) throw new Error("El ID de la comunidad es requerido.");

    const userClient = createClient(
      Deno.env.get("PROJECT_URL") ?? "",
      Deno.env.get("ANON_KEY") ?? "",
      {
        global: {
          headers: { Authorization: req.headers.get("Authorization")! },
        },
      }
    );
    const {
      data: { user },
    } = await userClient.auth.getUser();

    if (!user) throw new Error("Acceso denegado: Usuario no autenticado.");

    const adminClient = createClient(
      Deno.env.get("PROJECT_URL") ?? "",
      Deno.env.get("SERVICE_ROLE_KEY") ?? ""
    );

    // --- Lógica Stripe Connect ---
    console.log("--- CREATE STRIPE CHECKOUT INVOCADO ---");
    console.log("Community ID:", communityId);

    const { data: communityData, error: communityError } = await adminClient
      .from("communities")
      .select(
        `stripe_price_id, slug, creator_id, profiles!communities_creator_id_fkey(stripe_account_id)`
      )
      .eq("id", communityId)
      .single();

    if (communityError) {
      console.error("DB Error fetching community data:", communityError);
      throw new Error(
        `Error al obtener datos de la comunidad: ${communityError.message}`
      );
    }
    if (
      !communityData ||
      !communityData.stripe_price_id ||
      !communityData.slug
    ) {
      console.error(
        "Missing community data or Stripe Price ID/Slug:",
        communityData
      );
      throw new Error(
        "Esta comunidad no tiene una suscripción o un slug configurado, o no se pudo obtener el creador."
      );
    }

    const priceId = communityData.stripe_price_id;
    const communitySlug = communityData.slug;
    const communityCreatorId = communityData.creator_id;

    console.log("Price ID from DB:", priceId);
    console.log("Community Creator ID:", communityCreatorId);

    let partnerStripeAccountId: string | null = null;
    if (communityData.profiles) {
      if (Array.isArray(communityData.profiles)) {
        partnerStripeAccountId =
          communityData.profiles.length > 0
            ? communityData.profiles[0].stripe_account_id
            : null;
      } else {
        partnerStripeAccountId = communityData.profiles.stripe_account_id;
      }
    }
    console.log(
      "Partner Stripe Account ID from profile:",
      partnerStripeAccountId
    );

    const customerId = await getOrCreateStripeCustomer(user.id, user.email!);
    console.log("Stripe Customer ID:", customerId);

    let sessionParams: Stripe.Checkout.SessionCreateParams = {
      customer: customerId,
      payment_method_types: ["card"],
      mode: "subscription",
      line_items: [{ price: priceId, quantity: 1 }],
      success_url: `${Deno.env.get(
        "SITE_URL"
      )}/community/${communitySlug}?purchase=success`,
      cancel_url: `${Deno.env.get("SITE_URL")}/community/${communitySlug}`,
      subscription_data: {
        metadata: {
          supabase_user_id: user.id,
          community_id: communityId,
        },
      },
    };

    // Objeto Stripe para usar. Por defecto, es el cliente 'stripe' principal.
    let stripeClientToUse = stripe;

    // Si la comunidad tiene un creator_id y ese creador tiene un Stripe Account ID, configuramos los pagos divididos
    if (communityCreatorId && partnerStripeAccountId) {
      console.log(
        "Community has a Partner Creator. Setting up connected account payment."
      );

      // ¡¡IMPORTANTE!! Usamos el account ID del partner para hacer la llamada
      // a Stripe en nombre de la cuenta conectada.
      // Así, Stripe buscará el priceId en la cuenta del partner.
      stripeClientToUse = new Stripe(Deno.env.get("STRIPE_SECRET_KEY") ?? "", {
        apiVersion: "2022-11-15", // Usar la misma versión de la API que Stripe es crucial
        stripeAccount: partnerStripeAccountId, // <-- Esto es la clave para Stripe Connect
        httpClient: Stripe.createFetchHttpClient(),
      });
      console.log(
        "Using Stripe client with stripeAccount:",
        partnerStripeAccountId
      );

      // Obtenemos el objeto Price usando el cliente del partner
      const priceObject = await stripeClientToUse.prices.retrieve(priceId);
      if (!priceObject || priceObject.unit_amount === null) {
        console.error(
          "Error retrieving price object from partner account:",
          priceObject
        );
        throw new Error(
          "No se pudo obtener el precio del producto para calcular la comisión (posiblemente ID no válido en cuenta del partner)."
        );
      }

      const totalAmount = priceObject.unit_amount;
      const applicationFeeAmount = Math.round(
        totalAmount * PLATFORM_COMMISSION_PERCENTAGE
      );

      sessionParams.payment_intent_data = {
        application_fee_amount: applicationFeeAmount,
        transfer_data: {
          destination: partnerStripeAccountId,
        },
      };
      console.log(
        `Calculated Application Fee: ${
          applicationFeeAmount / 100
        } (from total ${totalAmount / 100})`
      );
    } else {
      console.log(
        "Community is owned by Platform. Standard payment flow (no commission/transfer)."
      );
    }

    const session = await stripeClientToUse.checkout.sessions.create(
      sessionParams
    ); // Usar el cliente correcto

    if (!session.url)
      throw new Error("No se pudo crear la sesión de pago de Stripe.");

    console.log("Stripe Checkout Session created successfully:", session.url);
    return new Response(JSON.stringify({ checkoutUrl: session.url }), {
      headers: {
        "Content-Type": "application/json",
        "Access-Control-Allow-Origin": "*",
      },
      status: 200,
    });
  } catch (error: any) {
    console.error(
      "Unhandled error in create-stripe-checkout:",
      error.message,
      error.stack
    );
    return new Response(JSON.stringify({ error: error.message }), {
      headers: {
        "Content-Type": "application/json",
        "Access-Control-Allow-Origin": "*",
      },
      status: error.statusCode || 500,
    });
  }
});
